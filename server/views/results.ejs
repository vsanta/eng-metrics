<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Engineering Metrics</title>
    <!-- Include D3.js -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #ddd;
        }
        .header-details {
            flex: 1;
        }
        .header-actions {
            text-align: right;
        }
        .back-link {
            display: inline-block;
            background-color: #2196F3;
            color: white;
            padding: 8px 16px;
            text-decoration: none;
            border-radius: 4px;
            margin-left: 10px;
        }
        .back-link:hover {
            background-color: #0b7dda;
        }
        h1, h2, h3 {
            color: #333;
            margin-bottom: 15px;
        }
        .card {
            background: white;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
            overflow: hidden;
        }
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
            grid-gap: 20px;
            margin-bottom: 20px;
        }
        .metrics-full {
            grid-column: 1 / -1;
        }
        
        /* Tooltip styling */
        #tooltip {
            position: absolute;
            display: none;
            padding: 10px;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            pointer-events: none;
            z-index: 100;
        }
        /* Side panel styling */
        #sidePanel {
            position: fixed;
            top: 0;
            right: -400px;
            width: 380px;
            height: 100%;
            background: white;
            box-shadow: -2px 0 10px rgba(0,0,0,0.2);
            padding: 20px;
            overflow-y: auto;
            transition: right 0.3s ease;
            z-index: 1000;
        }
        #sidePanel.open {
            right: 0;
        }
        #sidePanel h2 {
            margin-top: 0;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }
        #closePanel {
            cursor: pointer;
            float: right;
            font-size: 20px;
            font-weight: bold;
            color: #888;
        }
        #closePanel:hover {
            color: #333;
        }
        
        /* Chart styling */
        .chart-container {
            width: 100%;
            height: 100%;
            min-height: 300px;
        }
        
        /* Collaboration network styling */
        #networkGraph {
            width: 100%;
            height: 600px;
            border: 1px solid #eee;
            border-radius: 4px;
        }
        .node {
            stroke: #fff;
            stroke-width: 1.5px;
        }
        .link {
            stroke: #999;
            stroke-opacity: 0.6;
        }
        
        /* Table styling */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 15px;
        }
        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:hover {
            background-color: #f5f5f5;
        }
        
        /* Contributor list styling */
        .contributor-list {
            list-style: none;
            padding: 0;
            margin: 0;
            max-height: 400px;
            overflow-y: auto;
        }
        .contributor-list li {
            padding: 10px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
        }
        .contributor-list li:hover {
            background-color: #f5f5f5;
        }
        
        /* Tabs for Raw Data */
        .tab-container {
            margin-top: 20px;
        }
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
            border-radius: 4px 4px 0 0;
        }
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 12px 16px;
            transition: 0.3s;
            font-size: 14px;
        }
        .tab button:hover {
            background-color: #ddd;
        }
        .tab button.active {
            background-color: white;
            border-bottom: 2px solid #2196F3;
        }
        .tabcontent {
            display: none;
            padding: 15px;
            border: 1px solid #ccc;
            border-top: none;
            border-radius: 0 0 4px 4px;
            background-color: white;
        }
        .tabcontent.active {
            display: block;
        }
    </style>
</head>
<body>
<div class="container">
    <header>
        <div class="header-details">
            <h1><%= analysisDetails.label %> Engineering Metrics</h1>
            <p>
                <strong>Path:</strong> <%= analysisDetails.local_path %> | 
                <strong>Period:</strong> <%= analysisDetails.since_date %> to present | 
                <strong>Generated:</strong> <%= new Date(analysisDetails.created_at).toLocaleString() %>
            </p>
        </div>
        <div class="header-actions">
            <a href="/" class="back-link">Back to Dashboard</a>
        </div>
    </header>
    
    <!-- Store the analysis key so it can be used by the front end -->
    <script>
        const analysisKey = "<%= analysisKey %>";
    </script>
    
    <!-- Top metrics section -->
    <div class="metrics-grid">
        <!-- Contributor Overview Card -->
        <div class="card">
            <h2>Contributor Overview</h2>
            <div id="contributorScatterPlot" class="chart-container"></div>
            <div id="tooltip"></div>
        </div>
        
        <!-- File Activity Card -->
        <div class="card">
            <h2>File Activity</h2>
            <div class="chart-container">
                <div id="fileChangeTypes" style="height: 300px;"></div>
            </div>
        </div>
        
        <!-- PR Timeline Card -->
        <div class="card metrics-full">
            <h2>PR Timeline</h2>
            <div class="chart-container">
                <div id="prTimeByMonth"></div>
            </div>
        </div>
        
        <!-- Collaboration Network Card -->
        <div class="card metrics-full">
            <h2>Collaboration Network</h2>
            <p>This graph shows how developers collaborate. Each link represents one developer editing files created by another.</p>
            <div id="networkGraph"></div>
        </div>
    </div>
    
    <!-- Contributor Metrics -->
    <div class="metrics-grid">
        <!-- Top Contributors Card -->
        <div class="card">
            <h2>Top Contributors by Influence</h2>
            <p>Influence score combines creating files that others modify with editing activity.</p>
            <ul class="contributor-list">
                <% topInfluencers.slice(0, 10).forEach(influencer => { %>
                    <li onclick="fetchContributorDetails('<%= influencer.author %>')">
                        <strong><%= influencer.author %></strong> – Score: <%= influencer.influenceScore %>
                        <div style="font-size: 0.9em; color: #666;">
                            Creates: <%= influencer.total_creates %>, 
                            Edits: <%= influencer.total_edits %>,
                            Edits on creations: <%= influencer.times_edited_on_created_files %>
                        </div>
                    </li>
                <% }); %>
            </ul>
        </div>
        
        <!-- Top Creators Card -->
        <div class="card">
            <h2>Top File Creators</h2>
            <p>Contributors who create the most new files.</p>
            <ul class="contributor-list">
                <% topCreators.slice(0, 10).forEach(creator => { %>
                    <li onclick="fetchContributorDetails('<%= creator.author %>')">
                        <strong><%= creator.author %></strong> – Creates: <%= creator.creates %>
                    </li>
                <% }); %>
            </ul>
        </div>
        
        <!-- Commit Activity Card -->
        <div class="card">
            <h2>Commit Activity</h2>
            <div class="chart-container">
                <div id="commitActivity"></div>
            </div>
        </div>
        
        <!-- Hot Files Card -->
        <div class="card">
            <h2>Hot Files (Most Changed)</h2>
            <div class="chart-container">
                <div id="hotFiles"></div>
            </div>
        </div>
    </div>
    
    <!-- Raw Data Section with Tabs -->
    <div class="card">
        <h2>Detailed Data</h2>
        
        <div class="tab-container">
            <div class="tab">
                <button class="tablinks active" onclick="openTab(event, 'commitsTab')">Commits</button>
                <button class="tablinks" onclick="openTab(event, 'prLifecycleTab')">PR Lifecycle</button>
                <button class="tablinks" onclick="openTab(event, 'fileExtensionsTab')">File Extensions</button>
                <button class="tablinks" onclick="openTab(event, 'commitTypesTab')">Work Types</button>
            </div>
            
            <div id="commitsTab" class="tabcontent active">
                <h3>Recent Commits</h3>
                <div id="commitsTable"></div>
                <button id="loadMoreCommits" style="margin-top: 10px; padding: 8px 15px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;">Load More</button>
            </div>
            
            <div id="prLifecycleTab" class="tabcontent">
                <h3>Pull Request Lifecycle</h3>
                <div id="prLifecycle"></div>
            </div>
            
            <div id="fileExtensionsTab" class="tabcontent">
                <h3>File Extensions</h3>
                <div id="fileExtensions"></div>
            </div>
            
            <div id="commitTypesTab" class="tabcontent">
                <h3>Work Type by Contributor</h3>
                <div id="commitTypes"></div>
            </div>
        </div>
    </div>
</div>

<!-- Side panel for detailed contributor info -->
<div id="sidePanel">
    <span id="closePanel">&times;</span>
    <div id="panelContent"></div>
</div>

<script>
    // Function for fetching contributor details
    function fetchContributorDetails(author) {
        fetch(`/api/contributor/${encodeURIComponent(author)}?analysisKey=${encodeURIComponent(analysisKey)}`)
            .then(response => response.json())
            .then(details => {
                showSidePanel(details);
            })
            .catch(err => {
                console.error('Error fetching contributor details:', err);
            });
    }
</script>

<script>
    // Function to render PR Time by Month chart
    function renderPRTimeByMonth(prTimeData) {
        const container = document.getElementById('prTimeByMonth');
        
        if (!prTimeData || !prTimeData.length) {
            container.innerHTML = "<p>No PR time by month data available.</p>";
            return;
        }
        
        // Create a bar chart for PR time by month
        const margin = {top: 30, right: 30, bottom: 70, left: 60};
        const width = 700 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;
        
        // Create SVG
        const svg = d3.select(container)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left}, ${margin.top})`);
        
        // X axis: month
        const x = d3.scaleBand()
            .range([0, width])
            .domain(prTimeData.map(d => d.month))
            .padding(0.2);
        
        svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");
        
        // Y axis: average hours
        const y = d3.scaleLinear()
            .domain([0, d3.max(prTimeData, d => d.avg_hours) * 1.1])
            .range([height, 0]);
        
        svg.append("g")
            .call(d3.axisLeft(y));
        
        // Color scale based on PR count
        const color = d3.scaleLinear()
            .domain([1, d3.max(prTimeData, d => d.pr_count)])
            .range(["#69b3a2", "#3498db"]);
        
        // Add a tooltip
        const tooltip = d3.select("body")
            .append("div")
            .attr("class", "tooltip")
            .style("opacity", 0)
            .style("position", "absolute")
            .style("background-color", "white")
            .style("border", "1px solid #ddd")
            .style("padding", "10px")
            .style("border-radius", "4px")
            .style("pointer-events", "none");
        
        // Add bars
        svg.selectAll("bars")
            .data(prTimeData)
            .enter()
            .append("rect")
            .attr("x", d => x(d.month))
            .attr("y", d => y(d.avg_hours))
            .attr("width", x.bandwidth())
            .attr("height", d => height - y(d.avg_hours))
            .attr("fill", d => color(d.pr_count))
            .on("mouseover", function(event, d) {
                tooltip.transition()
                    .duration(200)
                    .style("opacity", .9);
                tooltip.html(`
                    <strong>${d.month}</strong><br/>
                    Average Time: ${d.avg_hours.toFixed(1)} hours<br/>
                    Number of PRs: ${d.pr_count}
                `)
                    .style("left", (event.pageX) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on("mouseout", function() {
                tooltip.transition()
                    .duration(500)
                    .style("opacity", 0);
            });
        
        // Add title
        svg.append("text")
            .attr("x", width / 2)
            .attr("y", -10)
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .text("Average PR Merge Time by Month");
        
        // Add PR count line on secondary axis
        const y2 = d3.scaleLinear()
            .domain([0, d3.max(prTimeData, d => d.pr_count) * 1.1])
            .range([height, 0]);
        
        svg.append("g")
            .attr("transform", `translate(${width}, 0)`)
            .call(d3.axisRight(y2));
        
        // Add the line for PR count
        svg.append("path")
            .datum(prTimeData)
            .attr("fill", "none")
            .attr("stroke", "#e74c3c")
            .attr("stroke-width", 2)
            .attr("d", d3.line()
                .x(d => x(d.month) + x.bandwidth()/2)
                .y(d => y2(d.pr_count))
            );
        
        // Add dots for PR count
        svg.selectAll("dots")
            .data(prTimeData)
            .enter()
            .append("circle")
            .attr("cx", d => x(d.month) + x.bandwidth()/2)
            .attr("cy", d => y2(d.pr_count))
            .attr("r", 5)
            .attr("fill", "#e74c3c");
        
        // Add legend
        const legend = svg.append("g")
            .attr("transform", `translate(${width - 120}, 0)`);
        
        legend.append("circle")
            .attr("cx", 0)
            .attr("cy", 10)
            .attr("r", 5)
            .attr("fill", "#e74c3c");
        
        legend.append("text")
            .attr("x", 10)
            .attr("y", 10)
            .attr("dy", ".35em")
            .style("font-size", "12px")
            .text("PR Count");
        
        legend.append("rect")
            .attr("x", 0)
            .attr("y", 30)
            .attr("width", 10)
            .attr("height", 10)
            .attr("fill", "#69b3a2");
        
        legend.append("text")
            .attr("x", 15)
            .attr("y", 35)
            .attr("dy", ".35em")
            .style("font-size", "12px")
            .text("Avg Hours");
    }

</script>

<script>
    // Data injected from the server
    const dataPoints = <%- JSON.stringify(contributors || []) %>;
    const networkData = <%- JSON.stringify(networkData || []) %>;

    // Function to open tabs
    function openTab(evt, tabName) {
        // Find the parent tab container
        const tabContainer = evt.currentTarget.closest('.tab-container');
        
        // Get tabcontent elements only within this container
        const tabcontent = tabContainer.getElementsByClassName("tabcontent");
        for (let i = 0; i < tabcontent.length; i++) {
            tabcontent[i].classList.remove("active");
        }
        
        // Get tablinks elements only within this container
        const tablinks = tabContainer.getElementsByClassName("tablinks");
        for (let i = 0; i < tablinks.length; i++) {
            tablinks[i].classList.remove("active");
        }
        
        // Activate the selected tab
        document.getElementById(tabName).classList.add("active");
        evt.currentTarget.classList.add("active");
    }

    // Scatter Plot Visualization
    const width = 600, height = 400;
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };

    const svg = d3.select("#contributorScatterPlot")
        .append("svg")
        .attr("width", width)
        .attr("height", height);

    // Scales: x for creates, y for edits.
    const xScale = d3.scaleLinear()
        .domain([0, d3.max(dataPoints, d => d.creates) + 5])
        .range([margin.left, width - margin.right]);

    const yScale = d3.scaleLinear()
        .domain([0, d3.max(dataPoints, d => d.edits) + 5])
        .range([height - margin.bottom, margin.top]);

    // X-axis (File Creations)
    const xAxis = d3.axisBottom(xScale);
    svg.append("g")
        .attr("transform", `translate(0, ${height - margin.bottom})`)
        .call(xAxis)
        .append("text")
        .attr("x", width - margin.right)
        .attr("y", -10)
        .attr("fill", "#000")
        .style("text-anchor", "end")
        .text("File Creations");

    // Y-axis (File Edits)
    const yAxis = d3.axisLeft(yScale);
    svg.append("g")
        .attr("transform", `translate(${margin.left}, 0)`)
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("x", -margin.top)
        .attr("y", 15)
        .attr("fill", "#000")
        .style("text-anchor", "end")
        .text("File Edits");

    // Tooltip for hover effect
    const tooltip = d3.select("#tooltip");

    // Plot data points with click handler to load contributor details
    svg.selectAll("circle")
        .data(dataPoints)
        .enter()
        .append("circle")
        .attr("cx", d => xScale(d.creates))
        .attr("cy", d => yScale(d.edits))
        .attr("r", 8)
        .attr("fill", "steelblue")
        .on("mouseover", function(event, d) {
            tooltip.style("left", (event.pageX + 10) + "px")
                .style("top", (event.pageY - 10) + "px")
                .style("display", "inline-block")
                .html(`<strong>${d.author}</strong><br/>Creates: ${d.creates}<br/>Edits: ${d.edits}`);
        })
        .on("mouseout", () => {
            tooltip.style("display", "none");
        })
        .on("click", function(event, d) {
            // Include the analysisKey in the query parameter
            fetch(`/api/contributor/${encodeURIComponent(d.author)}?analysisKey=${encodeURIComponent(analysisKey)}`)
                .then(response => response.json())
                .then(details => {
                    showSidePanel(details);
                })
                .catch(err => {
                    console.error('Error fetching contributor details:', err);
                });
        });

    // Function to show side panel with contributor details
    function showSidePanel(details) {
        const panel = document.getElementById('sidePanel');
        const panelContent = document.getElementById('panelContent');
        
        // PR metrics HTML section
        let prMetricsHTML = '<p>No PR metrics available for this contributor.</p>';
        if (details.prMetrics) {
            const metrics = details.prMetrics;
            const differenceColor = metrics.difference < 0 ? '#4CAF50' : '#f44336'; // Green if faster than team average, red if slower
            
            prMetricsHTML = `
                <p><strong>Average PR Merge Time:</strong> ${metrics.avgHours.toFixed(1)} hours</p>
                <p><strong>Number of PRs:</strong> ${metrics.prCount}</p>
                <p><strong>Team Average PR Merge Time:</strong> ${metrics.teamAvgHours.toFixed(1)} hours</p>
                <p style="color: ${differenceColor}">
                    <strong>Difference from team average:</strong> 
                    ${metrics.difference > 0 ? '+' : ''}${metrics.difference.toFixed(1)} hours
                    (${metrics.difference > 0 ? 'slower than' : 'faster than'} team average)
                </p>
            `;
        }
        
        panelContent.innerHTML = `
        <h2>${details.influenceRank} ${details.author}</h2>
        <p><strong>Creates:</strong> ${details.creates}</p>
        <p><strong>Edits:</strong> ${details.edits}</p>
        <p><strong>Edits on their files:</strong> ${details.editsToCreations}</p>
        <p><strong>Influence Score:</strong> ${details.influenceScore}</p>
        <p style="font-size: 0.9em; color: #555;">
          <em>
            Influence Score is calculated as: Edits + (Creates × Multiplier), where
            Multiplier = (Edits on created files > 0 ? Edits on created files : 1)
          </em>
        </p>
        
        <h3>PR Metrics</h3>
        ${prMetricsHTML}
        
        <h3>Contributions per Repository</h3>
        ${details.perRepo && details.perRepo.length > 0 ? `
          <ul>
            ${details.perRepo.map(repo => `<li>${repo.repository}: ${repo.creates} creates, ${repo.edits} edits</li>`).join('')}
          </ul>
        ` : '<p>No per-repository data available.</p>'}
      `;
        panel.classList.add('open');
    }

    // Function to hide the side panel
    document.getElementById('closePanel').addEventListener('click', () => {
        document.getElementById('sidePanel').classList.remove('open');
    });

    // Initialize data visualizations
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize all charts on page load
        initVisualizations();
        
        // Add event listener for tab changes in the detailed data section
        document.querySelectorAll('.tab button').forEach(button => {
            button.addEventListener('click', function() {
                // The target tab is already handled by openTab function
                // Just ensure all visualizations are properly rendered
                window.dispatchEvent(new Event('resize'));
            });
        });
    });
    
    // Function to initialize all visualizations
    function initVisualizations() {
        createNetworkGraph();
        loadCommitsData();
        loadFileActivityData();
        loadPRMetricsData();
    }

    function createNetworkGraph() {
        // Only create the graph once
        if (document.querySelector('#networkGraph svg')) return;
        
        const graphWidth = document.getElementById('networkGraph').clientWidth;
        const graphHeight = 500;
        
        // Create nodes from unique creators and editors
        const uniqueAuthors = new Set();
        networkData.forEach(d => {
            uniqueAuthors.add(d.creator);
            uniqueAuthors.add(d.editor);
        });
        
        const nodes = Array.from(uniqueAuthors).map(name => ({ id: name }));
        
        // Create links from collaboration data
        const links = networkData.map(d => ({
            source: d.creator,
            target: d.editor,
            value: d.collaboration_count
        }));
        
        // Create color scale for the nodes
        const color = d3.scaleOrdinal(d3.schemeCategory10);
        
        // Create force simulation
        const simulation = d3.forceSimulation(nodes)
            .force("link", d3.forceLink(links).id(d => d.id))
            .force("charge", d3.forceManyBody().strength(-200))
            .force("center", d3.forceCenter(graphWidth / 2, graphHeight / 2))
            .force("collision", d3.forceCollide().radius(30));
        
        // Create SVG for the network
        const svg = d3.select("#networkGraph")
            .append("svg")
            .attr("width", graphWidth)
            .attr("height", graphHeight);
            
        // Define arrow markers for directed graph
        svg.append("defs").append("marker")
            .attr("id", "arrowhead")
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 25)
            .attr("refY", 0)
            .attr("orient", "auto")
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .append("path")
            .attr("d", "M0,-5L10,0L0,5")
            .attr("fill", "#999");
            
        // Add links with varying stroke-width based on collaboration count
        const link = svg.append("g")
            .selectAll("line")
            .data(links)
            .enter().append("line")
            .attr("class", "link")
            .attr("marker-end", "url(#arrowhead)")
            .style("stroke-width", d => Math.sqrt(d.value));
            
        // Create node group for circles and labels
        const node = svg.append("g")
            .selectAll("g")
            .data(nodes)
            .enter().append("g")
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));
                
        // Add circle to each node
        node.append("circle")
            .attr("class", "node")
            .attr("r", 10)
            .attr("fill", d => color(d.id))
            .append("title")
            .text(d => d.id);
            
        // Add text label to each node
        node.append("text")
            .attr("dx", 12)
            .attr("dy", ".35em")
            .text(d => d.id);
            
        // Update positions on each tick of the simulation
        simulation.on("tick", () => {
            link
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y);
                
            node
                .attr("transform", d => `translate(${d.x},${d.y})`);
        });
        
        // Drag functions
        function dragstarted(event, d) {
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }
        
        function dragged(event, d) {
            d.fx = event.x;
            d.fy = event.y;
        }
        
        function dragended(event, d) {
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }
    }
    
    // Raw data visualization functions
    // Function to load commits data for the commits tab
    function loadCommitsData() {
        if (document.querySelector('#commitsTable table')) return; // Only load once
        
        fetch(`/api/commits/${analysisKey}`)
            .then(res => res.json())
            .then(commits => {
                renderCommitsTable(commits.slice(0, 50)); // Show first 50 commits
                
                // Store all commits for pagination
                window.allCommits = commits;
                window.currentPage = 1;
                
                // Add event listener for "Load More" button
                document.getElementById('loadMoreCommits').addEventListener('click', loadMoreCommits);
            })
            .catch(error => {
                console.error('Error loading commits data:', error);
                document.getElementById('commitsTable').innerHTML = '<p>Error loading commit data. Please try again.</p>';
            });
    }
    
    // Function to load file activity data
    function loadFileActivityData() {
        // Load file changes and extensions data
        Promise.all([
            fetch(`/api/analytics/changes-by-type/${analysisKey}`).then(res => res.json()),
            fetch(`/api/analytics/file-extensions/${analysisKey}`).then(res => res.json()),
            fetch(`/api/analytics/hot-files/${analysisKey}`).then(res => res.json())
        ])
        .then(([changeTypes, fileExtensions, hotFiles]) => {
            renderFileChangeTypes(changeTypes);
            renderFileExtensions(fileExtensions);
            renderHotFiles(hotFiles);
        })
        .catch(error => {
            console.error('Error loading file activity data:', error);
        });
    }
    
    // Function to load PR metrics and commit activity data
    function loadPRMetricsData() {
        // Load PR lifecycle and commit activity data
        Promise.all([
            fetch(`/api/analytics/commits-by-day/${analysisKey}`).then(res => res.json()),
            fetch(`/api/analytics/pr-lifecycle/${analysisKey}`).then(res => res.json()),
            fetch(`/api/analytics/pr-time-by-month/${analysisKey}`).then(res => res.json()),
            fetch(`/api/analytics/commit-types/${analysisKey}`).then(res => res.json())
        ])
        .then(([commitsByDay, prLifecycle, prTimeByMonth, commitTypes]) => {
            renderCommitActivity(commitsByDay);
            renderPRLifecycle(prLifecycle);
            renderPRTimeByMonth(prTimeByMonth);
            renderCommitTypes(commitTypes);
        })
        .catch(error => {
            console.error('Error loading PR metrics data:', error);
        });
    }
    
    function loadMoreCommits() {
        window.currentPage++;
        const start = (window.currentPage - 1) * 50;
        const end = start + 50;
        const commits = window.allCommits.slice(start, end);
        
        if (commits.length === 0) {
            document.getElementById('loadMoreCommits').disabled = true;
            document.getElementById('loadMoreCommits').textContent = 'No More Commits';
            return;
        }
        
        // Append to the existing table
        const tbody = document.querySelector('#commitsTable table tbody');
        commits.forEach(commit => {
            const row = document.createElement('tr');
            
            // Format the date
            const date = new Date(commit.timestamp);
            const formattedDate = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
            
            row.innerHTML = `
                <td>${commit.hash.substring(0, 7)}</td>
                <td>${commit.author}</td>
                <td>${formattedDate}</td>
                <td>${commit.message}</td>
                <td>
                    <button onclick="showFileChanges('${commit.hash}')">View Changes</button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }
    
    function renderCommitsTable(commits) {
        const container = document.getElementById('commitsTable');
        
        // Create table
        const table = document.createElement('table');
        table.innerHTML = `
            <thead>
                <tr>
                    <th>Commit ID</th>
                    <th>Author</th>
                    <th>Date</th>
                    <th>Message</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody></tbody>
        `;
        
        // Add rows
        const tbody = table.querySelector('tbody');
        commits.forEach(commit => {
            const row = document.createElement('tr');
            
            // Format the date
            const date = new Date(commit.timestamp);
            const formattedDate = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
            
            row.innerHTML = `
                <td>${commit.hash.substring(0, 7)}</td>
                <td>${commit.author}</td>
                <td>${formattedDate}</td>
                <td>${commit.message}</td>
                <td>
                    <button onclick="showFileChanges('${commit.hash}')">View Changes</button>
                </td>
            `;
            tbody.appendChild(row);
        });
        
        container.appendChild(table);
    }
    
    function renderFileChangeTypes(changeTypes) {
        const container = document.getElementById('fileChangeTypes');
        
        // Create SVG for pie chart
        const width = 300;
        const height = 300;
        const radius = Math.min(width, height) / 2;
        
        const svg = d3.select(container)
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", `translate(${width / 2}, ${height / 2})`);
            
        // Create color scale
        const color = d3.scaleOrdinal()
            .domain(changeTypes.map(d => d.status))
            .range(d3.schemeCategory10);
            
        // Map status codes to readable names
        const statusNames = {
            'A': 'Added',
            'M': 'Modified',
            'D': 'Deleted',
            'R': 'Renamed',
            'C': 'Copied',
            'T': 'Type Changed'
        };
        
        // Format the data for pie chart
        const data = changeTypes.map(d => ({
            status: statusNames[d.status] || d.status,
            count: d.change_count
        }));
            
        // Create pie chart
        const pie = d3.pie()
            .value(d => d.count);
            
        const data_ready = pie(data);
            
        // Build arcs
        const arcGenerator = d3.arc()
            .innerRadius(0)
            .outerRadius(radius);
            
        // Add tooltip
        const tooltip = d3.select("body")
            .append("div")
            .attr("class", "tooltip")
            .style("opacity", 0)
            .style("position", "absolute")
            .style("background-color", "white")
            .style("border", "1px solid #ddd")
            .style("padding", "10px")
            .style("border-radius", "4px")
            .style("pointer-events", "none");
            
        // Add slices
        svg.selectAll('slices')
            .data(data_ready)
            .enter()
            .append('path')
            .attr('d', arcGenerator)
            .attr('fill', d => color(d.data.status))
            .attr('stroke', 'white')
            .style('stroke-width', '2px')
            .on('mouseover', function(event, d) {
                tooltip.transition()
                    .duration(200)
                    .style("opacity", .9);
                tooltip.html(`${d.data.status}: ${d.data.count} (${(d.data.count / d3.sum(data, d => d.count) * 100).toFixed(1)}%)`)
                    .style("left", (event.pageX) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on('mouseout', function() {
                tooltip.transition()
                    .duration(500)
                    .style("opacity", 0);
            });
            
        // Add labels
        svg.selectAll('labels')
            .data(data_ready)
            .enter()
            .append('text')
            .text(d => d.data.status)
            .attr('transform', d => `translate(${arcGenerator.centroid(d)})`)
            .style('text-anchor', 'middle')
            .style('font-size', '12px')
            .style('fill', 'white');
    }
    
    function renderFileExtensions(extensions) {
        const container = document.getElementById('fileExtensions');
        
        // Create a bar chart for top 10 extensions
        const data = extensions.slice(0, 10);
        
        const margin = {top: 30, right: 30, bottom: 70, left: 60};
        const width = 500 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;
        
        // Create SVG
        const svg = d3.select(container)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left}, ${margin.top})`);
            
        // X axis
        const x = d3.scaleBand()
            .range([0, width])
            .domain(data.map(d => d.extension))
            .padding(0.2);
        svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");
            
        // Y axis
        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count) * 1.1])
            .range([height, 0]);
        svg.append("g")
            .call(d3.axisLeft(y));
            
        // Add bars
        svg.selectAll("bars")
            .data(data)
            .enter()
            .append("rect")
            .attr("x", d => x(d.extension))
            .attr("y", d => y(d.count))
            .attr("width", x.bandwidth())
            .attr("height", d => height - y(d.count))
            .attr("fill", "#69b3a2");
            
        // Add title
        svg.append("text")
            .attr("x", width / 2)
            .attr("y", -10)
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .text("Top 10 File Extensions");
    }
    
    function renderCommitActivity(commitsByDay) {
        const container = document.getElementById('commitActivity');
        
        // Group by date
        const dateGroups = {};
        commitsByDay.forEach(item => {
            if (!dateGroups[item.date]) {
                dateGroups[item.date] = 0;
            }
            dateGroups[item.date] += item.commit_count;
        });
        
        // Convert to array
        const data = Object.entries(dateGroups)
            .map(([date, count]) => ({date: new Date(date), count}))
            .sort((a, b) => a.date - b.date);
            
        // Define dimensions
        const margin = {top: 20, right: 30, bottom: 30, left: 50};
        const width = 800 - margin.left - margin.right;
        const height = 300 - margin.top - margin.bottom;
        
        // Create SVG
        const svg = d3.select(container)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left}, ${margin.top})`);
            
        // X scale (time)
        const x = d3.scaleTime()
            .domain(d3.extent(data, d => d.date))
            .range([0, width]);
            
        // Y scale (linear)
        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count) * 1.1])
            .range([height, 0]);
            
        // Add X axis
        svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x));
            
        // Add Y axis
        svg.append("g")
            .call(d3.axisLeft(y));
            
        // Add the line
        svg.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", "steelblue")
            .attr("stroke-width", 1.5)
            .attr("d", d3.line()
                .x(d => x(d.date))
                .y(d => y(d.count))
            );
            
        // Add points
        svg.selectAll("circle")
            .data(data)
            .enter()
            .append("circle")
            .attr("cx", d => x(d.date))
            .attr("cy", d => y(d.count))
            .attr("r", 5)
            .attr("fill", "steelblue");
    }
    
    // Render PR lifecycle visualization
    function renderPRLifecycle(prData) {
        const container = document.getElementById('prLifecycle');
        
        if (!prData || !prData.length) {
            container.innerHTML = "<p>No PR lifecycle data available.</p>";
            return;
        }
        
        // Create a box plot for PR lifetime
        const margin = {top: 20, right: 30, bottom: 70, left: 60};
        const width = 600 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;
        
        // Create SVG
        const svg = d3.select(container)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left}, ${margin.top})`);
        
        // Calculate lifetime stats in hours
        const lifetimes = prData.map(d => d.lifetime_minutes / 60);
        
        // Create a table with PR lifecycle data
        const table = document.createElement('table');
        table.style.width = '100%';
        table.style.borderCollapse = 'collapse';
        table.style.marginTop = '20px';
        
        // Add header
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">Branch</th>
                <th style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">Created By</th>
                <th style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">Merged By</th>
                <th style="text-align: center; padding: 8px; border-bottom: 1px solid #ddd;">Created Date</th>
                <th style="text-align: center; padding: 8px; border-bottom: 1px solid #ddd;">Merged Date</th>
                <th style="text-align: right; padding: 8px; border-bottom: 1px solid #ddd;">Lifetime (hours)</th>
            </tr>
        `;
        table.appendChild(thead);
        
        // Add body
        const tbody = document.createElement('tbody');
        prData.forEach(pr => {
            const row = document.createElement('tr');
            const lifetimeHours = (pr.lifetime_minutes / 60).toFixed(1);
            const createdDate = new Date(pr.created_timestamp).toLocaleDateString();
            const mergedDate = pr.merged_timestamp ? new Date(pr.merged_timestamp).toLocaleDateString() : 'N/A';
            
            row.innerHTML = `
                <td style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">${pr.branch_name}</td>
                <td style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">${pr.created_by}</td>
                <td style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">${pr.merged_by || 'N/A'}</td>
                <td style="text-align: center; padding: 8px; border-bottom: 1px solid #ddd;">${createdDate}</td>
                <td style="text-align: center; padding: 8px; border-bottom: 1px solid #ddd;">${mergedDate}</td>
                <td style="text-align: right; padding: 8px; border-bottom: 1px solid #ddd;">${lifetimeHours}</td>
            `;
            tbody.appendChild(row);
        });
        table.appendChild(tbody);
        container.appendChild(table);
        
        // Create statistics panel
        const stats = document.createElement('div');
        stats.style.marginTop = '20px';
        stats.style.fontWeight = 'bold';
        
        // Calculate statistics
        const avgLifetime = lifetimes.reduce((a, b) => a + b, 0) / lifetimes.length;
        const medianLifetime = lifetimes.sort((a, b) => a - b)[Math.floor(lifetimes.length / 2)];
        
        stats.innerHTML = `
            <p>Average PR Lifetime: ${avgLifetime.toFixed(1)} hours</p>
            <p>Median PR Lifetime: ${medianLifetime.toFixed(1)} hours</p>
            <p>Total PRs: ${prData.length}</p>
        `;
        container.appendChild(stats);
    }
    
    // Render hot files visualization
    function renderHotFiles(hotFilesData) {
        const container = document.getElementById('hotFiles');
        
        if (!hotFilesData || !hotFilesData.length) {
            container.innerHTML = "<p>No hot files data available.</p>";
            return;
        }
        
        // Create a bar chart for hot files
        const margin = {top: 30, right: 30, bottom: 120, left: 60};
        const width = 700 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;
        
        // Create SVG
        const svg = d3.select(container)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left}, ${margin.top})`);
        
        // Prepare top 15 hottest files
        const data = hotFilesData.slice(0, 15);
        
        // X axis: files
        const x = d3.scaleBand()
            .range([0, width])
            .domain(data.map(d => d.filename))
            .padding(0.2);
        
        svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end")
            .style("font-size", "10px");
        
        // Y axis: change count
        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.change_count) * 1.1])
            .range([height, 0]);
        
        svg.append("g")
            .call(d3.axisLeft(y));
        
        // Color scale for contributor count
        const colorScale = d3.scaleLinear()
            .domain([1, d3.max(data, d => d.contributor_count)])
            .range(["#69b3a2", "#e41a1c"]);
        
        // Add a tooltip
        const tooltip = d3.select("body")
            .append("div")
            .attr("class", "tooltip")
            .style("opacity", 0)
            .style("position", "absolute")
            .style("background-color", "white")
            .style("border", "1px solid #ddd")
            .style("padding", "10px")
            .style("border-radius", "4px")
            .style("pointer-events", "none");
        
        // Add bars
        svg.selectAll("bars")
            .data(data)
            .enter()
            .append("rect")
            .attr("x", d => x(d.filename))
            .attr("y", d => y(d.change_count))
            .attr("width", x.bandwidth())
            .attr("height", d => height - y(d.change_count))
            .attr("fill", d => colorScale(d.contributor_count))
            .on("mouseover", function(event, d) {
                tooltip.transition()
                    .duration(200)
                    .style("opacity", .9);
                tooltip.html(`
                    <strong>${d.filename}</strong><br/>
                    Changes: ${d.change_count}<br/>
                    Contributors: ${d.contributor_count}
                `)
                    .style("left", (event.pageX) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on("mouseout", function() {
                tooltip.transition()
                    .duration(500)
                    .style("opacity", 0);
            });
        
        // Add title
        svg.append("text")
            .attr("x", width / 2)
            .attr("y", -10)
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .text("Most Frequently Changed Files");
        
        // Add legend
        const legend = svg.append("g")
            .attr("transform", `translate(${width - 150}, 10)`);
        
        legend.append("text")
            .attr("x", 0)
            .attr("y", -5)
            .style("font-size", "12px")
            .text("Contributors:");
        
        const legendScale = d3.scaleLinear()
            .domain([1, d3.max(data, d => d.contributor_count)])
            .range([0, 100]);
        
        const legendAxis = d3.axisBottom(legendScale)
            .ticks(5)
            .tickSize(15);
        
        legend.append("g")
            .attr("transform", "translate(0, 30)")
            .call(legendAxis);
        
        // Create the gradient for the legend
        const defs = svg.append("defs");
        const gradient = defs.append("linearGradient")
            .attr("id", "legend-gradient")
            .attr("x1", "0%")
            .attr("y1", "0%")
            .attr("x2", "100%")
            .attr("y2", "0%");
        
        gradient.append("stop")
            .attr("offset", "0%")
            .attr("stop-color", "#69b3a2");
        
        gradient.append("stop")
            .attr("offset", "100%")
            .attr("stop-color", "#e41a1c");
        
        // Add rectangle with gradient
        legend.append("rect")
            .attr("width", 100)
            .attr("height", 15)
            .style("fill", "url(#legend-gradient)");
    }
    
    // Render commit types visualization
    function renderCommitTypes(commitTypesData) {
        const container = document.getElementById('commitTypes');
        
        if (!commitTypesData || !commitTypesData.length) {
            container.innerHTML = "<p>No commit type data available.</p>";
            return;
        }
        
        // Group data by author
        const authorGroups = {};
        commitTypesData.forEach(item => {
            if (!authorGroups[item.author]) {
                authorGroups[item.author] = [];
            }
            authorGroups[item.author].push({
                type: item.type,
                count: item.count
            });
        });
        
        // Create a stacked bar chart for commit types by author
        const margin = {top: 30, right: 150, bottom: 70, left: 60};
        const width = 700 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;
        
        // Create SVG
        const svg = d3.select(container)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left}, ${margin.top})`);
        
        // Convert data to stacked format
        const authors = Object.keys(authorGroups);
        const allTypes = Array.from(new Set(commitTypesData.map(d => d.type)));
        
        // Prepare stacked data
        const stackedData = [];
        authors.forEach(author => {
            const authorData = { author };
            
            // Initialize all types to 0
            allTypes.forEach(type => {
                authorData[type] = 0;
            });
            
            // Update with actual values
            authorGroups[author].forEach(item => {
                authorData[item.type] = item.count;
            });
            
            stackedData.push(authorData);
        });
        
        // Create the stack generator
        const stack = d3.stack()
            .keys(allTypes)
            .order(d3.stackOrderDescending);
        
        const series = stack(stackedData);
        
        // Create color scale
        const color = d3.scaleOrdinal()
            .domain(allTypes)
            .range(d3.schemeCategory10);
        
        // Create x scale
        const x = d3.scaleBand()
            .domain(authors)
            .range([0, width])
            .padding(0.1);
        
        // Create y scale
        const y = d3.scaleLinear()
            .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])
            .range([height, 0]);
        
        // Add x axis
        svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end")
            .style("font-size", "10px");
        
        // Add y axis
        svg.append("g")
            .call(d3.axisLeft(y));
        
        // Add title
        svg.append("text")
            .attr("x", width / 2)
            .attr("y", -10)
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .text("Commit Types by Contributor");
        
        // Add tooltip
        const tooltip = d3.select("body")
            .append("div")
            .attr("class", "tooltip")
            .style("opacity", 0)
            .style("position", "absolute")
            .style("background-color", "white")
            .style("border", "1px solid #ddd")
            .style("padding", "10px")
            .style("border-radius", "4px")
            .style("pointer-events", "none");
        
        // Add bars
        svg.append("g")
            .selectAll("g")
            .data(series)
            .enter().append("g")
            .attr("fill", d => color(d.key))
            .selectAll("rect")
            .data(d => d)
            .enter().append("rect")
            .attr("x", d => x(d.data.author))
            .attr("y", d => y(d[1]))
            .attr("height", d => y(d[0]) - y(d[1]))
            .attr("width", x.bandwidth())
            .on("mouseover", function(event, d) {
                const type = this.parentNode.__data__.key;
                const count = d[1] - d[0];
                
                tooltip.transition()
                    .duration(200)
                    .style("opacity", .9);
                tooltip.html(`
                    <strong>${d.data.author}</strong><br/>
                    Type: ${type}<br/>
                    Count: ${count}
                `)
                    .style("left", (event.pageX) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on("mouseout", function() {
                tooltip.transition()
                    .duration(500)
                    .style("opacity", 0);
            });
        
        // Add legend
        const legend = svg.append("g")
            .attr("transform", `translate(${width + 20}, 0)`)
            .selectAll("g")
            .data(allTypes)
            .enter().append("g")
            .attr("transform", (d, i) => `translate(0, ${i * 20})`);
        
        legend.append("rect")
            .attr("width", 18)
            .attr("height", 18)
            .attr("fill", d => color(d));
        
        legend.append("text")
            .attr("x", 24)
            .attr("y", 9)
            .attr("dy", "0.35em")
            .text(d => d);
    }
    
    // Function to show file changes for a specific commit
    function showFileChanges(commitHash) {
        fetch(`/api/file-changes/${commitHash}`)
            .then(response => response.json())
            .then(fileChanges => {
                // Create a modal to display the changes
                const modal = document.createElement('div');
                modal.style.position = 'fixed';
                modal.style.zIndex = '1000';
                modal.style.left = '0';
                modal.style.top = '0';
                modal.style.width = '100%';
                modal.style.height = '100%';
                modal.style.overflow = 'auto';
                modal.style.backgroundColor = 'rgba(0,0,0,0.4)';
                
                // Modal content
                const modalContent = document.createElement('div');
                modalContent.style.backgroundColor = '#fefefe';
                modalContent.style.margin = '10% auto';
                modalContent.style.padding = '20px';
                modalContent.style.border = '1px solid #888';
                modalContent.style.width = '80%';
                modalContent.style.maxHeight = '70%';
                modalContent.style.overflow = 'auto';
                
                // Close button
                const closeButton = document.createElement('span');
                closeButton.innerHTML = '&times;';
                closeButton.style.color = '#aaa';
                closeButton.style.float = 'right';
                closeButton.style.fontSize = '28px';
                closeButton.style.fontWeight = 'bold';
                closeButton.style.cursor = 'pointer';
                closeButton.onclick = function() {
                    document.body.removeChild(modal);
                };
                
                modalContent.appendChild(closeButton);
                
                // Heading
                const heading = document.createElement('h3');
                heading.textContent = `File Changes for Commit ${commitHash.substring(0, 7)}`;
                modalContent.appendChild(heading);
                
                // Table of file changes
                const table = document.createElement('table');
                table.style.width = '100%';
                table.style.borderCollapse = 'collapse';
                
                // Table header
                const thead = document.createElement('thead');
                thead.innerHTML = `
                    <tr>
                        <th style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">Status</th>
                        <th style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">Filename</th>
                    </tr>
                `;
                table.appendChild(thead);
                
                // Table body
                const tbody = document.createElement('tbody');
                
                // Map status codes to readable names and colors
                const statusMap = {
                    'A': { text: 'Added', color: '#d0f0d0' },
                    'M': { text: 'Modified', color: '#e0e0f0' },
                    'D': { text: 'Deleted', color: '#f0d0d0' },
                    'R': { text: 'Renamed', color: '#f0f0d0' },
                    'C': { text: 'Copied', color: '#d0f0f0' },
                    'T': { text: 'Type Changed', color: '#f0d0f0' }
                };
                
                fileChanges.forEach(change => {
                    const row = document.createElement('tr');
                    
                    const statusInfo = statusMap[change.status] || { text: change.status, color: '#ffffff' };
                    
                    row.innerHTML = `
                        <td style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd; background-color: ${statusInfo.color};">
                            ${statusInfo.text}
                        </td>
                        <td style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">
                            ${change.filename}
                        </td>
                    `;
                    
                    tbody.appendChild(row);
                });
                
                table.appendChild(tbody);
                modalContent.appendChild(table);
                
                modal.appendChild(modalContent);
                document.body.appendChild(modal);
                
                // Close when clicking outside the modal
                window.onclick = function(event) {
                    if (event.target === modal) {
                        document.body.removeChild(modal);
                    }
                };
            })
            .catch(error => {
                console.error('Error fetching file changes:', error);
                alert('Error loading file changes. Please try again.');
            });
    }
</script>
</body>
</html>
