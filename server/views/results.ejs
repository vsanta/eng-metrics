<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Analysis Results</title>
    <!-- Include D3.js -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        /* Basic styling for the scatter plot and tooltip */
        #tooltip {
            position: absolute;
            display: none;
            padding: 8px;
            background-color: lightgray;
            border: 1px solid #333;
            border-radius: 4px;
        }
        /* Side panel styling */
        #sidePanel {
            position: fixed;
            top: 0;
            right: -400px;
            width: 350px;
            height: 100%;
            background: #f7f7f7;
            box-shadow: -2px 0 5px rgba(0,0,0,0.3);
            padding: 20px;
            overflow-y: auto;
            transition: right 0.3s ease;
        }
        #sidePanel.open {
            right: 0;
        }
        #sidePanel h2 {
            margin-top: 0;
        }
        #closePanel {
            cursor: pointer;
            float: right;
            font-size: 18px;
            font-weight: bold;
        }
    </style>
</head>
<body>
<h1>Analysis Complete</h1>
<p>Total Creates: <%= totalCreates %></p>
<p>Total Edits: <%= totalEdits %></p>
<p>Since Date: <%= sinceDate %></p>

<!-- Store the analysis key so it can be used by the front end -->
<script>
    const analysisKey = "<%= analysisKey %>";
</script>

<!-- Container for the scatter plot -->
<div id="scatterPlot"></div>
<div id="tooltip"></div>

<!-- Top 20 Influencers -->
<h2>Top 20 Influencers</h2>
<ul>
    <% topInfluencers.forEach(influencer => { %>
        <li>
            <strong><%= influencer.author %></strong> – Influence Score: <%= influencer.influenceScore %>
            (Creates: <%= influencer.total_creates %>, Edits: <%= influencer.total_edits %>,
            Edited on Created Files: <%= influencer.times_edited_on_created_files %>)
        </li>
    <% }); %>
</ul>

<!-- Top 20 Creators -->
<h2>Top 20 Creators</h2>
<ul>
    <% topCreators.forEach(creator => { %>
        <li>
            <strong><%= creator.author %></strong> – Creates: <%= creator.creates %>
        </li>
    <% }); %>
</ul>

<!-- Top 20 Editors -->
<h2>Top 20 Editors</h2>
<ul>
    <% topEditors.forEach(editor => { %>
        <li>
            <strong><%= editor.author %></strong> – Edits: <%= editor.edits %>
        </li>
    <% }); %>
</ul>

<!-- Top 20 People Who Create Files That Get Edited -->
<h2>Top 20 People Whose Files Get Edited</h2>
<ul>
    <% topEditedCreators.forEach(item => { %>
        <li>
            <strong><%= item.author %></strong> – Times Edited: <%= item.times_edited %>
        </li>
    <% }); %>
</ul>
<!-- Side panel for detailed contributor info -->
<div id="sidePanel">
    <span id="closePanel">&times;</span>
    <div id="panelContent"></div>
</div>

<script>
    // Data injected from the server: an array of contributor objects.
    const dataPoints = <%- JSON.stringify(contributors || []) %>;

    const width = 600, height = 400;
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };

    const svg = d3.select("#scatterPlot")
        .append("svg")
        .attr("width", width)
        .attr("height", height);

    // Scales: x for creates, y for edits.
    const xScale = d3.scaleLinear()
        .domain([0, d3.max(dataPoints, d => d.creates) + 5])
        .range([margin.left, width - margin.right]);

    const yScale = d3.scaleLinear()
        .domain([0, d3.max(dataPoints, d => d.edits) + 5])
        .range([height - margin.bottom, margin.top]);

    // X-axis (File Creations)
    const xAxis = d3.axisBottom(xScale);
    svg.append("g")
        .attr("transform", `translate(0, ${height - margin.bottom})`)
        .call(xAxis)
        .append("text")
        .attr("x", width - margin.right)
        .attr("y", -10)
        .attr("fill", "#000")
        .style("text-anchor", "end")
        .text("File Creations");

    // Y-axis (File Edits)
    const yAxis = d3.axisLeft(yScale);
    svg.append("g")
        .attr("transform", `translate(${margin.left}, 0)`)
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("x", -margin.top)
        .attr("y", 15)
        .attr("fill", "#000")
        .style("text-anchor", "end")
        .text("File Edits");

    // Tooltip for hover effect
    const tooltip = d3.select("#tooltip");

    // Plot data points with click handler to load contributor details
    svg.selectAll("circle")
        .data(dataPoints)
        .enter()
        .append("circle")
        .attr("cx", d => xScale(d.creates))
        .attr("cy", d => yScale(d.edits))
        .attr("r", 8)
        .attr("fill", "steelblue")
        .on("mouseover", function(event, d) {
            tooltip.style("left", (event.pageX + 10) + "px")
                .style("top", (event.pageY - 10) + "px")
                .style("display", "inline-block")
                .html(`<strong>${d.author}</strong><br/>Creates: ${d.creates}<br/>Edits: ${d.edits}`);
        })
        .on("mouseout", () => {
            tooltip.style("display", "none");
        })
        .on("click", function(event, d) {
            // Include the analysisKey in the query parameter
            fetch(`/api/contributor/${encodeURIComponent(d.author)}?analysisKey=${encodeURIComponent(analysisKey)}`)
                .then(response => response.json())
                .then(details => {
                    showSidePanel(details);
                })
                .catch(err => {
                    console.error('Error fetching contributor details:', err);
                });
        });

    // Function to show side panel with contributor details
    function showSidePanel(details) {
        const panel = document.getElementById('sidePanel');
        const panelContent = document.getElementById('panelContent');
        panelContent.innerHTML = `
        <h2>${details.influenceRank} ${details.author}</h2>
        <p><strong>Creates:</strong> ${details.creates}</p>
        <p><strong>Edits:</strong> ${details.edits}</p>
        <p><strong>Edits on their files:</strong> ${details.editsToCreations}</p>
        <p><strong>Influence Score:</strong> ${details.influenceScore}</p>
        <p style="font-size: 0.9em; color: #555;">
          <em>
            Influence Score is calculated as: Edits + (Creates × Multiplier), where
            Multiplier = (Edits on created files > 0 ? Edits on created files : 1)
          </em>
        </p>
        <h3>Contributions per Repository</h3>
        ${details.perRepo && details.perRepo.length > 0 ? `
          <ul>
            ${details.perRepo.map(repo => `<li>${repo.repository}: ${repo.creates} creates, ${repo.edits} edits</li>`).join('')}
          </ul>
        ` : '<p>No per-repository data available.</p>'}
      `;
        panel.classList.add('open');
    }

    // Function to hide the side panel
    document.getElementById('closePanel').addEventListener('click', () => {
        document.getElementById('sidePanel').classList.remove('open');
    });
</script>
</body>
</html>
